// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/remote/upd88/com/remote.proto

package comconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	com "github.com/uinta-labs/pando/gen/protos/remote/upd88/com"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RemoteServiceName is the fully-qualified name of the RemoteService service.
	RemoteServiceName = "remote.upd88.com.RemoteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RemoteServiceGetScheduleProcedure is the fully-qualified name of the RemoteService's GetSchedule
	// RPC.
	RemoteServiceGetScheduleProcedure = "/remote.upd88.com.RemoteService/GetSchedule"
	// RemoteServiceReportScheduleStateProcedure is the fully-qualified name of the RemoteService's
	// ReportScheduleState RPC.
	RemoteServiceReportScheduleStateProcedure = "/remote.upd88.com.RemoteService/ReportScheduleState"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	remoteServiceServiceDescriptor                   = com.File_protos_remote_upd88_com_remote_proto.Services().ByName("RemoteService")
	remoteServiceGetScheduleMethodDescriptor         = remoteServiceServiceDescriptor.Methods().ByName("GetSchedule")
	remoteServiceReportScheduleStateMethodDescriptor = remoteServiceServiceDescriptor.Methods().ByName("ReportScheduleState")
)

// RemoteServiceClient is a client for the remote.upd88.com.RemoteService service.
type RemoteServiceClient interface {
	GetSchedule(context.Context, *connect.Request[com.GetScheduleRequest]) (*connect.Response[com.GetScheduleResponse], error)
	ReportScheduleState(context.Context, *connect.Request[com.ReportScheduleStateRequest]) (*connect.Response[com.ReportScheduleStateResponse], error)
}

// NewRemoteServiceClient constructs a client for the remote.upd88.com.RemoteService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRemoteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RemoteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &remoteServiceClient{
		getSchedule: connect.NewClient[com.GetScheduleRequest, com.GetScheduleResponse](
			httpClient,
			baseURL+RemoteServiceGetScheduleProcedure,
			connect.WithSchema(remoteServiceGetScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportScheduleState: connect.NewClient[com.ReportScheduleStateRequest, com.ReportScheduleStateResponse](
			httpClient,
			baseURL+RemoteServiceReportScheduleStateProcedure,
			connect.WithSchema(remoteServiceReportScheduleStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// remoteServiceClient implements RemoteServiceClient.
type remoteServiceClient struct {
	getSchedule         *connect.Client[com.GetScheduleRequest, com.GetScheduleResponse]
	reportScheduleState *connect.Client[com.ReportScheduleStateRequest, com.ReportScheduleStateResponse]
}

// GetSchedule calls remote.upd88.com.RemoteService.GetSchedule.
func (c *remoteServiceClient) GetSchedule(ctx context.Context, req *connect.Request[com.GetScheduleRequest]) (*connect.Response[com.GetScheduleResponse], error) {
	return c.getSchedule.CallUnary(ctx, req)
}

// ReportScheduleState calls remote.upd88.com.RemoteService.ReportScheduleState.
func (c *remoteServiceClient) ReportScheduleState(ctx context.Context, req *connect.Request[com.ReportScheduleStateRequest]) (*connect.Response[com.ReportScheduleStateResponse], error) {
	return c.reportScheduleState.CallUnary(ctx, req)
}

// RemoteServiceHandler is an implementation of the remote.upd88.com.RemoteService service.
type RemoteServiceHandler interface {
	GetSchedule(context.Context, *connect.Request[com.GetScheduleRequest]) (*connect.Response[com.GetScheduleResponse], error)
	ReportScheduleState(context.Context, *connect.Request[com.ReportScheduleStateRequest]) (*connect.Response[com.ReportScheduleStateResponse], error)
}

// NewRemoteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRemoteServiceHandler(svc RemoteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	remoteServiceGetScheduleHandler := connect.NewUnaryHandler(
		RemoteServiceGetScheduleProcedure,
		svc.GetSchedule,
		connect.WithSchema(remoteServiceGetScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	remoteServiceReportScheduleStateHandler := connect.NewUnaryHandler(
		RemoteServiceReportScheduleStateProcedure,
		svc.ReportScheduleState,
		connect.WithSchema(remoteServiceReportScheduleStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/remote.upd88.com.RemoteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RemoteServiceGetScheduleProcedure:
			remoteServiceGetScheduleHandler.ServeHTTP(w, r)
		case RemoteServiceReportScheduleStateProcedure:
			remoteServiceReportScheduleStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRemoteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRemoteServiceHandler struct{}

func (UnimplementedRemoteServiceHandler) GetSchedule(context.Context, *connect.Request[com.GetScheduleRequest]) (*connect.Response[com.GetScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("remote.upd88.com.RemoteService.GetSchedule is not implemented"))
}

func (UnimplementedRemoteServiceHandler) ReportScheduleState(context.Context, *connect.Request[com.ReportScheduleStateRequest]) (*connect.Response[com.ReportScheduleStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("remote.upd88.com.RemoteService.ReportScheduleState is not implemented"))
}
